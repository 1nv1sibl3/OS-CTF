.section .data
input_prompt:
    .asciz "Enter the password: "
success_msg:
    .asciz "Correct! You've found the flag!\n"
failure_msg:
    .asciz "Incorrect password.\n"
encoded_flag:
    .byte 0x4f,0x53,0x43,0x54,0x46,0x7b,0x41,0x77,0x33,0x73,0x30,0x6d,0x65,0x5f,0x41,0x73,0x73,0x33,0x6d,0x62,0x6c,0x33,0x33,0x7d

.section .bss
    .lcomm input_buffer, 32

.section .text
    .global _start

_start:
    # Print the input prompt
    ldr r0, =input_prompt
    bl printf

    # Read user input
    ldr r0, =input_buffer
    ldr r1, =32
    bl gets

    # Process the input
    ldr r0, =input_buffer
    bl process_input

    # Verify the input
    ldr r0, =input_buffer
    ldr r1, =encoded_flag
    bl compare_encoded
    cmp r0, #0
    beq correct

incorrect:
    # Print failure message
    ldr r0, =failure_msg
    bl printf
    b end

correct:
    # Print success message
    ldr r0, =success_msg
    bl printf

end:
    # Exit the program
    mov r0, #0
    mov r7, #1
    svc #0

# Function to process input
# r0 - pointer to input buffer
process_input:
    push {lr}
    mov r1, r0
    mov r2, #0x42  # XOR key
process_loop:
    ldrb r3, [r0], #1
    cmp r3, #0
    beq process_end
    eor r3, r3, r2  # XOR operation
    strb r3, [r1], #1
    b process_loop
process_end:
    pop {lr}
    bx lr

# Function to compare processed input with encoded flag
# r0 - pointer to processed input buffer
# r1 - pointer to encoded flag
compare_encoded:
    push {lr}
compare_loop:
    ldrb r2, [r0], #1
    ldrb r3, [r1], #1
    cmp r2, #0
    beq compare_end
    cmp r2, r3
    bne compare_not_equal
    b compare_loop
compare_not_equal:
    mov r0, #1
    pop {lr}
    bx lr
compare_end:
    mov r0, #0
    pop {lr}
    bx lr

# Import the necessary functions
.extern printf
.extern gets